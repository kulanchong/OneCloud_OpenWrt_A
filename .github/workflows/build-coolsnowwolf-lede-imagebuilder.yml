name: build-coolsnowwolf-lede-imagebuilder

on:
  workflow_dispatch:
    inputs:
      repo-ref:
        description: 'coolsnowwolf/lede 分支或 tag（例如 master 或 v17.01.4）'
        required: false
        default: 'master'
      target:
        description: 'TARGET（例如 arm）'
        required: true
        default: 'arm'
      subtarget:
        description: 'SUBTARGET（例如 amlogic）'
        required: true
        default: 'amlogic'
      profile:
        description: 'PROFILE（设备 profile 名称，可留空）'
        required: false
        default: ''
      make-jobs:
        description: '并行编译任务数 (建议 1-2 在 Actions 上)'
        required: false
        default: '2'
      use-local-config:
        description: '如果仓库根目录放了 lede.config (自定义 .config)，设 true 则使用'
        required: false
        default: 'false'

jobs:
  build-imagebuilder:
    runs-on: ubuntu-latest
    env:
      LEDE_REPO: https://github.com/coolsnowwolf/lede.git
    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build dependencies
      run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential ccache gawk git subversion \
          libncurses5-dev libssl-dev python3 python3-setuptools python3-pip \
          unzip zlib1g-dev wget rsync gcc g++ make gettext automake \
          libtool binutils bzip2 file g++-multilib bc

      - name: Clone coolsnowwolf/lede (shallow)
        run: |
          set -e
          REF="${{ github.event.inputs.repo-ref }}"
          if [ -z "$REF" ]; then REF="master"; fi
          git clone --depth=1 --branch "$REF" "${LEDE_REPO}" lede-src

      - name: Show basic repo info
        working-directory: lede-src
        run: |
          echo "Checked out:"
          git rev-parse --abbrev-ref HEAD || true
          git rev-parse --short HEAD || true
          ls -la

      - name: Use provided lede.config if requested
        if: ${{ github.event.inputs.use-local-config == 'true' }}
        working-directory: lede-src
        run: |
          if [ -f ../lede.config ]; then
            echo "Copying lede.config from workflow repo root to lede-src/.config"
            cp ../lede.config .config
          elif [ -f lede.config ]; then
            echo "Copying lede.config from lede-src root ."
          else
            echo "lede.config not found in repo root. Continuing without it."
          fi

      - name: Prepare feeds and default config
        working-directory: lede-src
        run: |
          set -e
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          # 如果没有提供 .config，通过输入的 target/subtarget/profile 尝试生成基础 .config
          if [ ! -f .config ]; then
            echo "No .config found — generating minimal .config from inputs"
            TARGET="${{ github.event.inputs.target }}"
            SUBTARGET="${{ github.event.inputs.subtarget }}"
            PROFILE="${{ github.event.inputs.profile }}"

            if [ -z "$TARGET" ] || [ -z "$SUBTARGET" ]; then
              echo "ERROR: target or subtarget empty. Provide them when dispatching the workflow."
              exit 1
            fi

            # 生成最小的 .config 条目（注意：不同树的选项命名可能略有差别）
            echo "CONFIG_TARGET_${TARGET}=y" > .config || true
            echo "CONFIG_TARGET_${TARGET}_${SUBTARGET}=y" >> .config || true
            if [ -n "$PROFILE" ]; then
              # 常见的 profile 写法（可能需要你后续手动微调或直接放置 lede.config）
              SAFE_PROFILE="$(echo "$PROFILE" | sed 's/[^a-zA-Z0-9_]/_/g')"
              echo "CONFIG_TARGET_${TARGET}_${SUBTARGET}_DEVICE_${SAFE_PROFILE}=y" >> .config || true
            fi

            make defconfig || true
          else
            echo ".config exists — skipping auto generation"
          fi

      - name: Build ImageBuilder (make imagebuilder)
        working-directory: lede-src
        env:
          MAKEFLAGS: "-j${{ github.event.inputs.make-jobs }}"
        run: |
          set -e
          echo "开始构建 imagebuilder (可能需要较长时间)..."
          # Clean previous partial artifacts to avoid干扰
          make clean || true
          time make imagebuilder

      - name: List produced artifacts
        working-directory: lede-src
        run: |
          set -e
          echo "bin/targets 目录内容："
          ls -la bin/targets || true
          echo "查找 imagebuilder 文件："
          find bin/targets -type f -name 'openwrt-imagebuilder*' -print || true

      - name: Package artifacts
        working-directory: lede-src
        run: |
          set -e
          # 尝试打包找到的 imagebuilder 文件；若没有，打包整个 bin 目录便于排查
          FOUND=$(find bin/targets -type f -name 'openwrt-imagebuilder*' | head -n 1 || true)
          if [ -n "$FOUND" ]; then
            echo "Found imagebuilder: $FOUND"
            mkdir -p artifacts
            cp "$FOUND" artifacts/
            tar -C artifacts -czf openwrt-imagebuilder-artifacts.tar.gz .
          else
            echo "No imagebuilder tar found; packing bin/targets for debug"
            tar -czf openwrt-bin-targets-debug.tar.gz bin/targets || true
          fi

      - name: Upload artifact(s)
        uses: actions/upload-artifact@v4
        with:
          name: lede-imagebuilder-artifacts
          path: |
            lede-src/openwrt-imagebuilder-artifacts.tar.gz
            lede-src/openwrt-bin-targets-debug.tar.gz

      - name: Print note
        run: |
          echo "如果构建成功，artifact 名称为 lede-imagebuilder-artifacts，可在 Actions => Artifacts 下载。"
          echo "如果没有 imagebuilder，请检查 lede.config（建议在本地运行 make menuconfig 并把生成的 .config 保存为 lede.config 放到仓库根目录）"
