name: 一站式精简onecloud【编译 ImageBuilder（含失败回退）】

on:
  workflow_dispatch:
    inputs:
      brun_type:
        type: choice
        description: 选择内核/平台（用于替换 target/linux）
        required: true
        default: "meson6.6"
        options:
        - amlogic6.12
        - amlogic6.6
        - meson6.6
      OP_IP:
        description: '玩客云IP'
        required: true
        default: '192.168.1.110'
        type: string
      SERVER_IP:
        description: '主路由IP'
        required: true
        default: '192.168.1.1'
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  # ===== 你的源与脚本/文件（保持和原仓库一致） =====
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  FEEDS_CONF: feeds.conf.default

  # 基础 config（按 brun_type 二选一）
  CONFIG_FILE: Config/quicker.config
  CONFIG_FILE_AMLOGIC: Config/quicker-amlogic.config

  DIY_P1_SH: sh/new_immortalwrt.sh
  DIY_P2_SH: sh/lean2.sh
  DIY_P3_SH: sh/remove.sh
  DIY_P4_SH: sh/edit_files.sh
  DIY_P5_SH: sh/python3.patch.sh

  OWRT_IP: ${{ github.event.inputs.OP_IP }}
  OWRT_SERVER_IP: ${{ github.event.inputs.SERVER_IP }}
  OWRT_NAME: OneCloud
  OWRT_FILES: onecloud/files
  OWRT_brun_type: ${{ github.event.inputs.brun_type }}

  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build_imagebuilder:
    runs-on: ubuntu-latest

    steps:
    - name: 清理服务器空间
      uses: rmoyulong/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: 检出当前仓库
      uses: actions/checkout@main

    - name: 基础信息
      run: |
        echo "CPU/内存/磁盘概览："
        lscpu || true
        sudo lshw -short -C memory | grep GiB || true
        df -hT

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update --fix-missing
        sudo -E apt-get -qq full-upgrade
        sudo -E apt-get -qq install -y \
          build-essential ccache gawk git subversion \
          libncurses5-dev libssl-dev python3 python3-setuptools python3-pip \
          unzip zlib1g-dev wget rsync gcc g++ make gettext automake \
          libtool binutils bzip2 file g++-multilib bc \
          bison flex gperf python3-venv zstd libelf-dev u-boot-tools \
          dos2unix
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir && sudo chown $USER:$GROUPS /workdir
        df -Th

    - name: 初始化变量
      run: |
        export OWRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
        export OWRT_SOURCE=$(echo $REPO_URL | cut -d '/' -f 5-)

        echo "OWRT_URL=$REPO_URL" >> $GITHUB_ENV
        echo "OWRT_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
        echo "OWRT_DATE=$OWRT_DATE" >> $GITHUB_ENV
        echo "OWRT_SOURCE=$OWRT_SOURCE" >> $GITHUB_ENV
        echo "OWRT_NAME=$OWRT_NAME" >> $GITHUB_ENV
        echo "OWRT_IP=$OWRT_IP" >> $GITHUB_ENV
        echo "OWRT_SERVER_IP=$OWRT_SERVER_IP" >> $GITHUB_ENV
        echo "DIY_P1_SH=$DIY_P1_SH" >> $GITHUB_ENV
        echo "DIY_P2_SH=$DIY_P2_SH" >> $GITHUB_ENV
        echo "DIY_P3_SH=$DIY_P3_SH" >> $GITHUB_ENV
        echo "DIY_P4_SH=$DIY_P4_SH" >> $GITHUB_ENV
        echo "DIY_P5_SH=$DIY_P5_SH" >> $GITHUB_ENV
        echo "OWRT_brun_type=$OWRT_brun_type" >> $GITHUB_ENV
        echo "选择 brun_type: ${{ env.OWRT_brun_type }}"

        if [[ "${{ env.OWRT_brun_type }}" == "meson6.6" || "${{ env.OWRT_brun_type }}" == "meson6.12" ]]; then
          OWRT_CFG="${CONFIG_FILE}"
        elif [[ "${{ env.OWRT_brun_type }}" == "amlogic6.6" || "${{ env.OWRT_brun_type }}" == "amlogic6.12" ]]; then
          OWRT_CFG="${CONFIG_FILE_AMLOGIC}"
        else
          echo "未选择合法 brun_type"; exit 1
        fi
        echo "OWRT_CFG=$OWRT_CFG" >> $GITHUB_ENV

    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 处理脚本
      run: |
        cd ./sh
        dos2unix ./*.sh
        chmod +x ./*.sh

    - name: 设置订阅源 & 替换 target/linux
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        cd openwrt

        if [[ "${{ env.OWRT_brun_type }}" == "meson6.6" ]]; then
          mv $GITHUB_WORKSPACE/lede6.6/target/linux/meson target/linux
          chmod -Rf 755 target/linux/meson
          echo "use meson6.6"
        elif [[ "${{ env.OWRT_brun_type }}" == "meson6.12" ]]; then
          mv $GITHUB_WORKSPACE/lede6.12/target/linux/meson target/linux
          chmod -Rf 755 target/linux/meson
          echo "use meson6.12"
        elif [[ "${{ env.OWRT_brun_type }}" == "amlogic6.12" ]]; then
          mv $GITHUB_WORKSPACE/lede6.6/target/linux/amlogic target/linux
          chmod -Rf 755 target/linux/amlogic
          echo "use amlogic6.12"
        elif [[ "${{ env.OWRT_brun_type }}" == "amlogic6.6" ]]; then
          mv $GITHUB_WORKSPACE/lede6.6/target/linux/amlogic target/linux
          chmod -Rf 755 target/linux/amlogic
          echo "use amlogic6.6"
        fi

        $GITHUB_WORKSPACE/$DIY_P1_SH
        echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV

    - name: 缓存（第二次起生效）
      uses: rmoyulong/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt
        mixkey: ${{ env.OWRT_brun_type }}/tree/${{ env.OWRT_BRANCH }}?device=${{ env.OWRT_CFG }}

    - name: 安装 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 注入自定义 files/ 与 DIY
      working-directory: ./openwrt
      run: |
        curl -L -o package/base-files/files/etc/banner https://raw.githubusercontent.com/rmoyulong/AX6-Actions_Lede/master/ax6/cats_banner || true
        $GITHUB_WORKSPACE/$DIY_P2_SH
        $GITHUB_WORKSPACE/$DIY_P3_SH

        dos2unix $GITHUB_WORKSPACE/$OWRT_FILES/etc/*.sh || true
        dos2unix $GITHUB_WORKSPACE/$OWRT_FILES/etc/rc.* || true
        chmod -Rf 755 $GITHUB_WORKSPACE/$OWRT_FILES/etc/*.sh || true
        chmod -Rf 755 $GITHUB_WORKSPACE/$OWRT_FILES/etc/rc.* || true
        chmod -Rf 755 $GITHUB_WORKSPACE/$OWRT_FILES/etc/init.d/* || true

        mkdir -p ./files
        cp -rf $GITHUB_WORKSPACE/$OWRT_FILES/* ./files || true

        $GITHUB_WORKSPACE/$DIY_P4_SH "${{ env.OWRT_IP }}" "${{ env.OWRT_SERVER_IP }}" || true
        $GITHUB_WORKSPACE/sh/openclash32.sh || true
        $GITHUB_WORKSPACE/$DIY_P5_SH || true

    - name: 准备 .config（强制开启 ImageBuilder）
      working-directory: ./openwrt
      run: |
        rm -f .config*
        if [ -f "$GITHUB_WORKSPACE/${{ env.OWRT_CFG }}" ]; then
          cp "$GITHUB_WORKSPACE/${{ env.OWRT_CFG }}" .config
        else
          echo "未找到 $GITHUB_WORKSPACE/${{ env.OWRT_CFG }}"; exit 1
        fi

        # 用官方脚本强制开启 IB
        ./scripts/config --file .config -e IB
        # 统一缺省项；用 olddefconfig 避免 IB 被 defconfig 误关
        make olddefconfig

        echo "==== 检查 CONFIG_IB ===="
        grep -E '^CONFIG_IB=y' .config || (echo 'ERROR: CONFIG_IB 未开启；当前 target 可能不支持 IB' && exit 2)

        echo "==== diffconfig（便于审计） ===="
        ./scripts/diffconfig.sh || true

    - name: 下载源码包
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \; || true
        find dl -size -1024c -exec rm -f {} \; || true

    - name: 尝试直接构建 ImageBuilder（verbose, -j1）
      id: try_ib
      working-directory: ./openwrt
      env:
        MAKEFLAGS: "-j1"
      continue-on-error: true
      run: |
        set -e
        echo "=== make imagebuilder (V=s, -j1) ==="
        make V=s -j1 imagebuilder 2>&1 | tee build-ib.log
        echo "ib_result=success" >> $GITHUB_OUTPUT

    - name: 如果上一步失败则回退到全量 make（也会产出 IB）
      if: ${{ steps.try_ib.outcomes.failure || steps.try_ib.conclusion == 'failure' || steps.try_ib.outputs.ib_result != 'success' }}
      working-directory: ./openwrt
      env:
        MAKEFLAGS: "-j$(nproc)"
      run: |
        set -e
        echo "=== 回退：make world（V=s），同时产出 ImageBuilder ==="
        make V=s 2>&1 | tee build-world.log

    - name: 汇总产物（仅收集 ImageBuilder 包）
      working-directory: ./openwrt
      run: |
        echo "== ImageBuilder 包 =="
        find bin/targets -type f -name 'openwrt-imagebuilder*' -print || true

        mkdir -p outfile
        # IB 包
        find bin/targets -type f -name 'openwrt-imagebuilder*' -exec cp -v {} outfile/ \; || true
        # 保存当前 .config 以便复用
        cp -v .config outfile/config.used.txt || true

    - name: 上传产物与日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: onecloud-imagebuilder-and-logs
        path: |
          openwrt/outfile
          openwrt/build-ib.log
          openwrt/build-world.log
          openwrt/bin/targets

    - name: 发布 Release（只发 IB 包）
      if: ${{ env.UPLOAD_RELEASE == 'true' }}
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: IB_${{ env.OWRT_SOURCE }}_${{ env.OWRT_DATE }}
        body: |
          玩客云 OneCloud（${{ env.OWRT_brun_type }}）ImageBuilder 打包
          - 源码：${{ env.OWRT_SOURCE }}
          - 分支：${{ env.OWRT_BRANCH }}
          - 说明：本工作流优先 make imagebuilder；若目标缺失自动回退到全量 make 也会产出 IB。
        artifacts: openwrt/outfile/*
